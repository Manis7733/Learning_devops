create a file: hello.py

intialize the git(version control system): git init

check the status of our working: git status

to add any particular file in the git staging area : git add [filename with extension]
or to add all the files in dir : git add .

to connect our local workspace with our remote repo : git remote add origin https://github.com/Manis7733/Learning_devops.git
	2nd step : git branch -M master
		3rd step : git push -u origin master

to push the local file/files to remote repo:
	1: git add [file name]
	   git add [file name1] [file name2]
	   git add .
	2: git commit -m "[commit message]" #only the added branches are commited
	3: git push #only the commited files are pushed

to see all the usefull configuration information: git config --list
	in that we have to initiate username and email (if not already present)
		commands to do so : git config --global user.name= 
					  git config --global user.email= 

to clone a particular repo
	open the dir CMD where you want to copy the clone
		run this command : git clone https://github.com/Manis7733/Learning_devops.git

to take the changes done in remote repo to our working local dir : git pull origin main
to take the changes done in remote repo to .git folder then to the working dir : git fetch origin main #fetches the changes made into .git folder
													   git merge #combines the file in .git folder with our working dir/file

to commit directly without adding it to staging phase : git commit -am "[commit message]"

to revert the file in local workspace if it is staged then use : git restore --staged [filename]
						  if it is note staged the use : git checkout -- [filename]

when commiting or pushing some files if you want to purposly ignore some files just create .gitignore file (if not already created) and paste the dir/file you want to ignore
	then add the dir : git add . #adds everthing to the staging area
		then commit the added files : git commit -m "[commiting comment]"
			then push the local workspace to remote repo : git push origin main
	(files we mentioned in the .gitignore file will be ignored by the git)

to see difference of the files between the workspace and stagged file : git diff

to view all the log of commits done : git log
						  git log -2
	to view the logs of particular author : git log --author=[authorname]
	to view all the log  of commits with the changes done : git log -p

to view the list of branch : git branch
	to create new branch : git branch [new branch name]
	to switch to new branch : git checkout [existing branch name]
	to delete an existing branch : git branch -d [name of the branch]

to merge the changes we did in newfeature(or anyother branch) to the main branch : git merge [branchname]

to save a feature for the future and not use it now : git stash
	changes in a file needed in future may be saved in stash and use it later 
	now to retrive that feature in your file we use : git stash apply [index of the feature you want to apply]
	to add a stash with custom comment message : git stash push -m "[your custom message]"
	to view the list of stash we created : git stash list
	to remove a stash from the stash container : git stash drop [index of the stash you want to drop]

if we do edits in some other branch and commits it, and now we open MAIN branch and want to apply that commit to our main branch we do : git cherry-pick [commit id of that commit done by ]